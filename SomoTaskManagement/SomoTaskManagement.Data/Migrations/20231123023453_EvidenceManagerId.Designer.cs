// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SomoTaskManagement.Data;

#nullable disable

namespace SomoTaskManagement.Data.Migrations
{
    [DbContext(typeof(SomoTaskManagemnetContext))]
    [Migration("20231123023453_EvidenceManagerId")]
    partial class EvidenceManagerId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FArea")
                        .HasColumnType("float");

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("Area", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Employee_Task", b =>
                {
                    b.Property<int>("SubtaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubtaskId"), 1L, 1);

                    b.Property<int>("ActualEfforMinutes")
                        .HasColumnType("int");

                    b.Property<int>("ActualEffortHour")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DaySubmit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("SubtaskId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskId");

                    b.ToTable("SubTask", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Employee_TaskType", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("EmployeeId", "TaskTypeId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("Employee_TaskType", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.EvidenceImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskEvidenceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskEvidenceId");

                    b.ToTable("EvidenceImage", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Farm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FarmArea")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Farm", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.FarmTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPlant")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRepeat")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecific")
                        .HasColumnType("bit");

                    b.Property<int?>("LiveStockId")
                        .HasColumnType("int");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OriginalTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("OverallEfforMinutes")
                        .HasColumnType("int");

                    b.Property<int?>("OverallEffortHour")
                        .HasColumnType("int");

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("Remind")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SuppervisorId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("LiveStockId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PlantId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("FarmTask", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("Field", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.HabitantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Environment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("HabitantType", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.HubConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("MemberId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HubConnection", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.LiveStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<int>("HabitantTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("HabitantTypeId");

                    b.ToTable("LiveStock", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("Material", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Material_Task", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("MaterialId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("Material_Task", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<int?>("HubConnectionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.HasIndex("HubConnectionId")
                        .IsUnique()
                        .HasFilter("[HubConnectionId] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.MemberToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeRefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredDateAccessToken")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredDateRefreshToken")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberToken", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsNew")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("NotificationDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("TaskId")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Notification_Member", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("NotificationId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("Notification_Member", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int>("HabitantTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("HabitantTypeId");

                    b.ToTable("Plant", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.TaskEvidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EvidenceType")
                        .HasColumnType("int");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskEvidence", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TaskType", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FarmArea")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("ZoneTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ZoneTypeId");

                    b.ToTable("Zone", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.ZoneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ZoneType", (string)null);
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Area", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.Farm", "Farm")
                        .WithMany("Areas")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Farm_Area");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Employee", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.Farm", "Farm")
                        .WithMany("Employees")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Farm_Employee");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Employee_Task", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.Employee", "Employee")
                        .WithMany("Employee_Tasks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Employee_Employee_Task");

                    b.HasOne("SomoTaskManagement.Domain.Entities.FarmTask", "Task")
                        .WithMany("Employee_Tasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Task_Employee_Task");

                    b.Navigation("Employee");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Employee_TaskType", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.Employee", "Employee")
                        .WithMany("Employee_TaskTypes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Employee_Employee_TaskType");

                    b.HasOne("SomoTaskManagement.Domain.Entities.TaskType", "TaskType")
                        .WithMany("Employee_TaskTypes")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Task_Employee_TaskType");

                    b.Navigation("Employee");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.EvidenceImage", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.TaskEvidence", "TaskEvidence")
                        .WithMany("EvidenceImages")
                        .HasForeignKey("TaskEvidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskEvidence");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.FarmTask", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.Field", "Field")
                        .WithMany("Tasks")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Field_Task");

                    b.HasOne("SomoTaskManagement.Domain.Entities.LiveStock", "LiveStrock")
                        .WithMany("Tasks")
                        .HasForeignKey("LiveStockId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_LiveStock_FarmTask");

                    b.HasOne("SomoTaskManagement.Domain.Entities.Member", "Manager")
                        .WithMany("TaskManagers")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Manager_Task");

                    b.HasOne("SomoTaskManagement.Domain.Entities.Plant", "Plant")
                        .WithMany("Tasks")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Plant_FarmTask");

                    b.HasOne("SomoTaskManagement.Domain.Entities.TaskType", "TaskType")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_TaskType_Task");

                    b.Navigation("Field");

                    b.Navigation("LiveStrock");

                    b.Navigation("Manager");

                    b.Navigation("Plant");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Field", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.Zone", "Zone")
                        .WithMany("Fields")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Zone_Field");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.HabitantType", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.Farm", "Farm")
                        .WithMany("HabitantTypes")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HabitantType_Farm");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.LiveStock", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.Field", "Field")
                        .WithMany("LiveStocks")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Field_LiveStock");

                    b.HasOne("SomoTaskManagement.Domain.Entities.HabitantType", "HabitantType")
                        .WithMany("LiveStocks")
                        .HasForeignKey("HabitantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HabitantType_LiveStock");

                    b.Navigation("Field");

                    b.Navigation("HabitantType");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Material", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.Farm", "Farm")
                        .WithMany("Materials")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Material_Farm");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Material_Task", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.Material", "Material")
                        .WithMany("MaterialTasks")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Material_MaterialTask");

                    b.HasOne("SomoTaskManagement.Domain.Entities.FarmTask", "Task")
                        .WithMany("Material_Tasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Task_MaterialTask");

                    b.Navigation("Material");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Member", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.Farm", "Farm")
                        .WithMany("Members")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Farms_Member");

                    b.HasOne("SomoTaskManagement.Domain.Entities.HubConnection", "HubConnection")
                        .WithOne("Member")
                        .HasForeignKey("SomoTaskManagement.Domain.Entities.Member", "HubConnectionId");

                    b.HasOne("SomoTaskManagement.Domain.Entities.Role", "Role")
                        .WithMany("Members")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Role_Member");

                    b.Navigation("Farm");

                    b.Navigation("HubConnection");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.MemberToken", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.Member", "Member")
                        .WithMany("MemberTokens")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Member_MemberToken");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Notification_Member", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.Member", "Member")
                        .WithMany("Notification_Members")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Notification_Member_Member");

                    b.HasOne("SomoTaskManagement.Domain.Entities.Notification", "Notification")
                        .WithMany("Notification_Members")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TNotification_Member_Notification");

                    b.Navigation("Member");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Plant", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.Field", "Field")
                        .WithMany("Plants")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Field_Plant");

                    b.HasOne("SomoTaskManagement.Domain.Entities.HabitantType", "HabitantType")
                        .WithMany("Plants")
                        .HasForeignKey("HabitantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HabitantType_Plant");

                    b.Navigation("Field");

                    b.Navigation("HabitantType");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.TaskEvidence", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.FarmTask", "Task")
                        .WithMany("TaskEvidences")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Task_TaskEvidence");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Zone", b =>
                {
                    b.HasOne("SomoTaskManagement.Domain.Entities.Area", "Area")
                        .WithMany("Zones")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Area_Zone");

                    b.HasOne("SomoTaskManagement.Domain.Entities.ZoneType", "ZoneType")
                        .WithMany("Zones")
                        .HasForeignKey("ZoneTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ZoneType_Zone");

                    b.Navigation("Area");

                    b.Navigation("ZoneType");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Area", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Employee_TaskTypes");

                    b.Navigation("Employee_Tasks");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Farm", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Employees");

                    b.Navigation("HabitantTypes");

                    b.Navigation("Materials");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.FarmTask", b =>
                {
                    b.Navigation("Employee_Tasks");

                    b.Navigation("Material_Tasks");

                    b.Navigation("TaskEvidences");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Field", b =>
                {
                    b.Navigation("LiveStocks");

                    b.Navigation("Plants");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.HabitantType", b =>
                {
                    b.Navigation("LiveStocks");

                    b.Navigation("Plants");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.HubConnection", b =>
                {
                    b.Navigation("Member");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.LiveStock", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Material", b =>
                {
                    b.Navigation("MaterialTasks");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Member", b =>
                {
                    b.Navigation("MemberTokens");

                    b.Navigation("Notification_Members");

                    b.Navigation("TaskManagers");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Notification", b =>
                {
                    b.Navigation("Notification_Members");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Plant", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Role", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.TaskEvidence", b =>
                {
                    b.Navigation("EvidenceImages");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.TaskType", b =>
                {
                    b.Navigation("Employee_TaskTypes");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.Zone", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("SomoTaskManagement.Domain.Entities.ZoneType", b =>
                {
                    b.Navigation("Zones");
                });
#pragma warning restore 612, 618
        }
    }
}
